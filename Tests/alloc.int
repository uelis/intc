fn tailrecimp(x) =
  case x of
    Inr(a, ()) -> return Inl((), Inr(a, ()))
  | Inl(u, s) ->
      case s of
         Inr(b) -> return Inr(b)
       | Inl(d, (a, ())) -> return Inl((), Inr(a, ()))

let tailrec =
   direct(tailrecimp : (('a -> ['b]) -> 'a -> ['b]) -> 'a -> ['b])

let ispositive = λ e -> val x = e in intslt(0, x)

let while =
   λ e -> λ c ->
    (tailrec (λ f ->
        fn () ->
          val x = e in
          if x then (c; f ()) else return ()))()

let allocimp = fn x ->
  case x of
    Inl(mem, yv) ->
     (case yv of
          Inl(c, (newmem, ())) -> return Inl(newmem, Inl(c, ()))
        | Inr(ar) ->
          (case ar of
             Inl(d, ()) -> return Inl(mem, Inr(Inl(d, mem)))
           | Inr(a) -> return Inr(a))
     )
  | Inr(q, ()) -> return Inl(q, Inr(Inr(())))

let newvar1 =
    direct(allocimp : (('a -> [unit]) -> (['a] -> ['b]) ) -> ('a -> ['b]))

/* check that swapping works */
let newvar = fn initial -> λ body -> newvar1 body initial

let main = newvar 0 (λ write -> λ read ->
   copy write as write1, write2 in
   copy read as read1, read2 in
     val u = write1 12 in
     while (ispositive read1) (
       val v = read2 in
       print v; print "\n";
       val v' = intsub(v, 1) in
       write2(v')
     ))
