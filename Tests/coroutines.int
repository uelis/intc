/* interaction strategy for tail recursion */
fn tailrecimp(x) =
  case x of
    Inr(a, ()) -> return Inl((), Inr(a, ()))
  | Inl(u, s) ->
      case s of
         Inr(b) -> return Inr(b)
       | Inl(d, (a, ())) -> return Inl((), Inr(a, ()))

/* The tail recursion combinator is implemented by the above strategy */
let tailrec =
   direct(tailrecimp : (('a -> ['b]) -> 'a -> ['b]) -> 'a -> ['b])

/* interaction strategies for coroutines */
let coroutimpl= fn x ->
  case x of 
    Inl(ud, m) ->
        (case m of
          Inl(e, (a, ())) ->
            (case ud of 
               Inl() -> return Inr(Inl(e, Inr(a, ())))
             | Inr(d) -> return Inr(Inl(e, Inl(d, a))))
        | Inr(c) -> return Inr(Inr(c)))
  | Inr(r) -> 
      (case r of 
        Inl(e, m) ->
            (case m of
              Inl(d, (b, ())) -> 
               return Inl(Inr(d), Inl(e, b))
            | Inr(c) -> 
                return Inr(Inr(c)))
      | Inr() -> return Inl(Inl(), Inr()))

/* coroutine combinator */      
let corout = direct(coroutimpl
   : (('a -> ['b]) -> ['c]) ->
     (('b -> ['a]) -> ('a -> ['c])) ->
     ['c] )

let println = fn i -> 
   print i;
   print "\n"

/* Example */
   
let proc1 = 位 yield ->
     tailrec (位 proc1 ->
       fn j ->
         val b = intslt(500, j) in
         if b then
           return ()
         else
           print "p1: ";
           println j;
  	       val j' = intadd(j, 2) in
           val i = yield j' in
           proc1 i
       ) 3

let proc2 = 位 yield ->
   copy yield as yield1, yield2 in
   tailrec (位 proc2 ->
     fn j ->
       print "p2: ";
       println j;
       val j' = intsub(j, 1) in
       val k = yield1 j' in
       print "p2: got ";
       println k;
       val k' = intsub(k, 1) in
       val i = yield2 k' in
       proc2 i
   ) 

let main =
   corout proc1 proc2
