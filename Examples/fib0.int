type list<'a> = Nil of unit | Cons of 'a * box<list<'a>>

let fiximpl = 
 fn x {
  case x of 
   Inl(l, x) -> 
       (case x of
          Inl(b, q) -> Inl(box (Cons(b, l)), Inr(q))
        | Inr(a) ->
            case (unbox l) of 
               Nil -> Inr(a)
             | Cons(hd, tl) -> Inl(tl, Inl(hd, a)))
 | Inr(q) -> 
    Inl(box(Nil), Inr(q))
 }

let fix = direct(fiximpl: {box<list<'b>>} | {'b}|''a| -> ''a| -> ''a)


let fibs = fix (Î» fib ->
   copy fib as fib1, fib2 in
   fn i {
      if i < 2 then 1
      else 
       fib1(i-1) + fib2(i-2)
   })

fn main() {
  let v = fibs 37 in
  print v
}
