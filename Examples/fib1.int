fn fiximpl(x) =
    case x of
    Inl(l, x) ->
        (case x of
           Inl(b, q) ->
             push(unit + 'b, Inr(b));
             return Inl((), Inr(q))
         | Inr(a) ->
	     let u = pop(unit + 'b) in
             (case u of
                Inl -> return Inr(a)
              | Inr(hd) ->
                   return Inl((), Inl(hd, a))))
  | Inr(q) ->
     push(unit + 'b, Inl());
     return Inl((), Inr(q))

let fix = direct(fiximpl:(''a -> ''a) -> ''a)

let fibs = fix (Î» fib ->
   copy fib as fib1, fib2 in
   fn i ->
     let b = intslt(i, 2) in
     if b then return 1
     else
       let f1 = let i' = intsub(i,1) in fib1 i' in
       let f2 = let i' = intsub(i,2) in fib2 i' in
       intadd(f1, f2)
   )

let main =
  let v = fibs 37 in
  print v
