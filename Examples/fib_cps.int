fn fiximpl(x) =
    case x of
    Inl(l, x) ->
        (case x of
           Inl(b, q) ->
             push(unit + 'b, Inr(b));
             return Inl((), Inr(q))
         | Inr(a) ->
	     val u = pop(unit + 'b) in
             (case u of
                Inl -> return Inr(a)
              | Inr(hd) ->
                   return Inl((), Inl(hd, a))))
  | Inr(q) ->
     push(unit + 'b, Inl());
     return Inl((), Inr(q))

let fix = direct(fiximpl:(''a -> ''a) -> ''a)

let vl = λ n -> λ k -> k n
let add = λ k -> k (λ n -> λ k1 ->
                            val nv = n in
                            k1 (λ m -> λ k2 ->
                                    val mv = m in
                                    k2 (intadd(nv, mv))
                               )
                   )
let app = λ e1 -> λ e2 -> λ k -> e1 (λ x1 -> e2 (λ x2 -> x1 x2 k))
let mem = λ f -> λ k ->  k (f (λ r -> r))

let step =
   λ f ->
   copy f as f1, f2 in
     vl (λ x ->
          mem (λ k ->
              val xv = x in
	      val b = intslt(xv, 2) in
              (if b then
                 vl (return 1) k
              else
                app (app add (f1 (intsub(xv, 1)))) (f2 (intsub(xv, 2))) k)
            )
         )
let fixv = fix (λ a -> step (λ x -> λ k -> a (λ b -> b x k)))

let main =
   val v = app fixv (vl (return 38)) (λ r -> r) in
   print v

