type list<'a> = Nil of unit
              | Cons of 'a * box<list<'a>>

/* interaction strategy for tail recursion */
fn tailrecimp(x) =
  case x of
    Inr(a, ()) -> return Inl((), Inr(a, ()))
  | Inl(u, s) ->
      case s of
         Inr(b) -> return Inr(b)
       | Inl(d, (a, ())) -> return Inl((), Inr(a, ()))

/* The tail recursion combinator is implemented by the above strategy */
let tailrec =
   direct(tailrecimp : (('a -> ['b]) -> 'a -> ['b]) -> 'a -> ['b])


/* factorial with accumulator */
let facaux = tailrec (λ facaux ->
    fn (i, acc) ->
      val b = inteq(i, 0) in
      if b then return acc else
        val i' = intsub(i, 1) in
	val acc' = intmul(acc, i) in
        facaux (i', acc')
)

/* factorial */
fn fac(i) =
   facaux (i, 1)

/* factorial test */
fn main1 =
   val v = fac 10 in
     print v

/* stategy implementing the fixed point combinator */
let fiximpl =
 fn x ->
  case x of
   Inl(l, x) ->
       (case x of
          Inl(b, q) ->
	    /* allocate new cons cell */
	    val a = alloc() in
	    /* store Cons(b, l) in cell a */
	    val () = store(a, Cons(b, l)) in
    	    return Inl(a, Inr(q))
        | Inr(a) ->
	    /* load u from cell l */
	    val u = load(l) in
	    /* free cell l */
	    val () = free(l) in
            case u of
               Nil -> return Inr(a)
             | Cons(hd, tl) -> return Inl(tl, Inl(hd, a)))
 | Inr(q) ->
    val a = alloc() in
    val () = store(a, Nil) in
    return Inl(a, Inr(q))

/* fixed point combinator */
let fix = direct(fiximpl: /*{box<list<'b>>}*/ ( /*{'b}*/(''a) -> ''a) -> ''a)

/* fibonacci */
let fib = fix (λ fib ->
   copy fib as fib1, fib2 in
   fn i ->
      val t = intslt(i, 2) in
      if t then
        return 1
      else
	val f1 =
            val i1 = intsub(i, 1) in
	    fib1 i1 in
	val f2 =
            val i2 = intsub(i, 2) in
	    fib2 i2 in
	val s = intadd(f1, f2) in
	return s
   )

let main =
  val v = fib 38 in
  print v
