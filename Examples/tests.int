type list<'a> = Nil of unit | Cons of 'a * ~list<'a>

let f1 = fn(c){ c }
let f2 = fn c { let x = 3 in 3 }
let main43 = 
   fn c {
      let c = False in 
      let x = case c of True -> (print 1) | False -> () in print 3
   }

let cons = fun x -> fun xs -> fn i { if i = 0 then x() else xs(i-1) }
let head = fun xs -> fn u { xs 0 }
let tail = fun xs -> fn i { xs (i+1) }

fn tailrecimp(x) {
  case x of 
    Inr(a) -> Inl((), Inr(a))
  | Inl(u, s) ->
      case s of
         Inr(b) -> Inr(b)
       | Inl(d, a) -> Inl((), Inr(a))
}       

let tailrec = 
   direct(tailrecimp : {unit}| {'c}|'a -> 'b| -> 'a -> 'b| -> 'a -> 'b)

let facaux = tailrec (fun facaux ->
    fn (i, r) {
      if i=0 then r else facaux (i-1, r*i)
    }
) 

fn fac(i) {
   facaux (i, 1)
}

fn main12() { 
   let v = fac 10 in
     print v
}

fn trivial() {
   let x = Cons(1, ~(Cons(2,~(Nil)))) in
   let u = case x of
                Nil -> 12
              | Cons(z) -> let (h,t) = z in h in
   print u
}

let faclistaux= tailrec (fun faclistaux ->
    fn (i, (r, l)) { 
       if i=1 then l else faclistaux (i-1, (r*i, Cons(r*i, ~l)))
    })

fn faclist(i) {
   faclistaux (i, (1, Nil()))
}

let printlist = tailrec (fun printlist ->
    fn l { 
       case l of 
           Nil -> 
            print "\n"
         | Cons(h, t) ->
            print h;
            print " ";
            printlist ^t
    })

fn main2() {
   let x = Cons(1, ~(Cons(2, ~(Nil)))) in   
   let u1 = printlist x in
   let y = faclist(12) in
   printlist y
}

let fiximpl = 
 fn x {
  case x of 
   Inl(l, x) -> 
       (case x of
          Inl(b, q) -> Inl(~(Cons(b, l)), Inr(q))
        | Inr(a) ->
            case ^l of 
               Nil -> Inr(a)
             | Cons(hd, tl) -> Inl(tl, Inl(hd, a)))
 | Inr(q) -> 
    Inl(~(Nil), Inr(q))
 }

let fix = direct(fiximpl: {~list<'b>} | {'b}|''a| -> ''a| -> ''a)

let fib = fix (fun fib ->
   copy fib as fib1, fib2 in
   fn i {
      if i < 2 then 1 else 
      fib1(i-1) + fib2(i-2)
   })

fn main() {
  let v = fib 38 in
  print v
}


fn fixsimpl(x) {
    case x of 
    Inl(lx) -> 
      let (l,x) = lx in
        (case x of
           Inl(b, q) ->
             push(unit + 'b, Inr(b));
             Inl((), Inr(q))
         | Inr(a) ->
             (case pop(unit + 'b) of 
                Inl -> Inr(a)
              | Inr(hd) ->
                   Inl((), Inl(hd, a))))
  | Inr(q) -> 
     push(unit + 'b, Inl());
     Inl((), Inr(q))
}

let fixs = direct(fixsimpl: {unit}| {'c}|'a -> 'b| -> 'a -> 'b| -> 'a -> 'b)

let fibs = fixs (fun fib ->
   copy fib as fib1, fib2 in
   fn i {
      if i < 2 then 1
      else 
       fib1(i-1) + fib2(i-2)
   })

let fibtr = fixs (fun fib ->
   fn i {
      tailrec (fun tr ->
         fn (i, acc) {
            if i < 2 then acc else 
              tr (i-2, fib(i-1) + acc)
         }
      ) (i, 1)
   })

fn main() {
  let v = fibs 38 in
  print v
}

let t0 =fun f ->  fun g ->
      fn z {
            let (x, xs) = z in
            let v = f x in
            v
      }

let t =fun f -> (fun mapf ->
      fn l {
        case l of
          Nil -> Nil()
        | Cons(x, xs) -> Cons(f x, ~(mapf ^xs))
      })

let map = fun f ->
   fixs (fun mapf ->
      fn l {
        case l of
          Nil -> Nil()
        | Cons(x, xs) -> Cons(f x, ~(mapf ^xs))
      })

let maprev = fun f ->
   tailrec (fun mapf ->
      fn (l, r) {
        case l of
          Nil -> r
        | Cons(x, xs) -> mapf(^xs, Cons(f x, ~r))
      })

let revaux =
   tailrec (fun rev ->
      fn (l, r) {
        case l of
          Nil -> r
        | Cons(x, xs) -> rev(^xs, Cons(x, ~r))
      })

fn rev(l) {
  revaux (l, Nil())
}

let maptr = fun f -> 
   fn l {
      rev (maprev f (l, Nil))
   }

fn clone(l) {
   tailrec (fun clone ->
      fn (l, (l1, l2)) {
        case l of
          Nil -> (rev l1, rev l2)
        | Cons(x, xs) -> clone(^xs, (Cons(x, ~l1), Cons(x, ~l2)))
      })
    (l, (Nil, Nil))
}

fn upto(n) {
   tailrec (fun aux -> 
   fn (m, r) {
      if m = 0 then r else aux (m - 1, Cons(m, ~r))
   }) (n, Nil)
}
     
fn main4() {
   let x = upto 30 in   
   let y = maptr (fn i { i * i }) x in
   let (y1, y2) = clone y in
   printlist y1;
   printlist y2
}

/*
let main = 
   fn u -> 
      let v = head (tail (tail (cons (fn x -> 27) (fn i -> i)))) () in
      print v
      */
