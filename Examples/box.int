fn tailrecimp(x) =
  case x of
    Inr(a, ()) -> return Inl((), Inr(a, ()))
  | Inl(u, s) ->
      case s of
         Inr(b) -> return Inr(b)
       | Inl(d, (a, ())) -> return Inl((), Inr(a, ()))

let tailrec =
   direct(tailrecimp : (('a -> ['b]) -> 'a -> ['b]) -> 'a -> ['b])

type list<'a> =
        Nil of unit
      | Cons of 'a * box<list<'a>>

let maprev = λ f ->
   tailrec (λ mapf ->
      fn (l, r) ->
        case l of
          Nil -> return r
        | Cons(x, xs) ->
            let tail = load(xs) in
            /* reuse memory */
            let () = store(xs, r) in
            let y = f x in
            mapf(tail, Cons(y, xs))
      )

let revaux =
   tailrec (λ rev ->
      fn (l, r) ->
        case l of
          Nil -> return r
        | Cons(x, xs) ->
           let tail = load(xs) in
           let () = store(xs, r) in
           rev(tail, Cons(x, xs))
      )

fn rev(l) =
  revaux (l, Nil)

let maptr = λ f ->
   fn l ->
      let l1 = maprev f (l, Nil) in
      rev l1

/* prints a list and deallocates the memory in the process */
let printlist = tailrec (λ printlist ->
    fn l ->
       case l of
           Nil ->
            print "\n"
         | Cons(h, t) ->
            print h;
            print " ";
            let tail = load(t) in
            let () = free(t) in
            printlist tail
    )

/* duplicate a list */
fn clone(l) =
   tailrec (λ clone ->
      fn (l, (l1, l2)) ->
        case l of
          Nil ->
	    let rl1 = rev l1 in
	    let rl2 = rev l2 in
	     return (rl1, rl2)
        | Cons(x, xs) ->
	    let tl = load(xs) in
	    let () = free(xs) in
	    let t1 = alloc() in
	    let () = store(t1, l1) in
	    let t2 = alloc() in
            let () = store(t2, l2) in
            clone(tl, (Cons(x, t1), Cons(x, t2)))
      )
    (l, (Nil, Nil))

fn upto(n) =
   tailrec (λ aux ->
   fn (m, r) ->
      let b = inteq(m, 0) in
      if b then return r else
        let m' = intsub(m, 1) in
        let tail = alloc() in
        let () = store(tail, r) in
        aux (m', Cons(m, tail))
   ) (n, Nil)

let main =
   let l = upto 20 in
   let l1 = maptr (fn i -> intmul(i, i)) l in
   let (l2, l3) = clone l1 in
   let l3' = rev l3 in
   printlist l2;
   printlist l3'
