fn fiximpl(x) =
    case x of 
    Inl(l, x) -> 
        (case x of
           Inl(b, q) ->
             push(unit + 'b, Inr(b));
             return Inl((), Inr(q))
         | Inr(a) ->
	     let u = pop(unit + 'b) in
             (case u of 
                Inl -> return Inr(a)
              | Inr(hd) ->
                   return Inl((), Inl(hd, a))))
  | Inr(q) -> 
     push(unit + 'b, Inl());
     return Inl((), Inr(q))

let fix = direct(fiximpl:(''a -> ''a) -> ''a)

let cons = λ x -> λ xs -> 
   fn(i) ->
     let e = inteq(i, 0) in
     if e then x else
       let i' = intsub(i, 1) in
       xs i'

let head = λ l -> fn () -> l(0) 

let tail = λ l -> fn i -> let i' = intadd(i, 1) in l(i') 

let andalso = 
   λ b1 -> λ b2 -> 
     let c = b1 in
     if c then b2 else return False

let orelse = 
   λ b1 -> λ b2 -> 
    let c = b1 in
    if c then return True else b2

let printlistaux = λ l ->
   fix (λ printlist ->
   fn (i, j) ->
     let e = inteq(i, j) in
     if e then return ()
     else
        (let v = l i in print v);
        print "\n";
	let i' = intadd(i, 1) in
        printlist (i', j)
   )
          
let printlist = λ l -> 
   fn i ->
      printlistaux l (0, i)

fn signum(x) =
  let c = intslt(0, x) in
  if c then return 1 else
    let c = inteq(x, 0) in
    if c then return 0 else 0-1

fn abs(x) =
  let c = intslt(0, x) in
   if c then return x else
     intsub(0, x)

let aux = fix (λ aux ->
    λ n ->
      fn i ->
         let v = n in
         cons (return 1) 
           (cons (return v) 
              (cons (return 1) 
                  (aux (intadd (v, 2))))) i
      )

let eContFrac = cons (return 2) (aux (return 2))                  

let ratTrans = fix (λ ratTrans -> 
   copy ratTrans as ratTrans1, ratTrans2 in
   λ abcd ->
   λ xs ->
   copy xs as xs1, xs23 in
   copy xs23 as xs2, xs3 in
   fn(i) ->
     let (a, (b, (c, d))) = abcd in
     let cond =
       andalso 
          (orelse (let sc = signum c in
	           let sd = signum d in
		   inteq(sc, sd)) 
                  (let ac = abs c in
		   let ad = abs d in
		   intslt(ac, ad)))
          (andalso (
	            let v1 =
		      let v11 = c+d in
	              let v12 = b/d in
		      v11*v12 in
	            let v21 = a+b in
	            let v2 = v21+1 in
		    intslt(v1, v2))
             (let v1 = a+b in
	      let v21 = c+d in
	      let v22 = b/d in
	      let v23 = v21*v22 in
	      let v2 = v23 + v21 in
	      intslt(v1, v2))) in
     if cond then
       let iz = inteq(i, 0) in (
       if iz then intdiv(b, d)
       else
        let v =
          let v1 = b/d in
    	  let v2 = v1 * c in
    	  let v3 = a - v2 in
    	  let v4 = v1*d in
    	  let v5 = b - v4 in
          return (c, (d, (v3, v5))) in
        let i' = intsub(i,1) in
        ratTrans1 (return v) xs1 i')
     else
       let v =
         let x = xs2(0) in
         let v1 = x*b in
         let v2 = a+v1 in
	 let v3 = x*d in
	 let v4 = c+v3 in
	 return (b, (v2, (d, v4))) in
       ratTrans2 (return v) (tail xs3) i
   )
         
let todigits = fix (λ todigits ->
    λ l ->
    copy l as l1, l2 in
    fn(i) ->
      let c = inteq(i, 0) in
      if c then l1(i) else
        let i' = intsub(i, 1) in
        todigits (ratTrans (return (10, (0, (0, 1)))) (tail l2)) i'
  )

let e = todigits eContFrac

let main =
  printlist e 10